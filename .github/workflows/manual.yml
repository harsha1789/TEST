name: Java CI with Email Report (Chrome + D_Vuvu_V3 only)

on:
  push:
    branches: [ "D_Vuvu_V3" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Chrome & Setup Compatible ChromeDriver
        shell: pwsh
        run: |
          echo "🚀 Installing Chrome..."
          choco install googlechrome -y --ignore-checksums

          Start-Sleep -Seconds 10  # Give time for install to finish

          $chromePath = "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
          if (-Not (Test-Path $chromePath)) {
            $chromePath = "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe"
          }

          if (-Not (Test-Path $chromePath)) {
            Write-Error "❌ Chrome executable not found after install."
            exit 1
          }
          Write-Host "✅ Chrome found at: $chromePath"

          # Try both ways of getting version
          $regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe"
          $regChromePath = (Get-ItemProperty -Path $regPath).'(default)'
          $versionInfo = (Get-Item $regChromePath).VersionInfo
          $chromeVersion = $versionInfo.ProductVersion
          $majorVersion = $chromeVersion.Split('.')[0]

          Write-Host "✅ Installed Chrome Version: $chromeVersion"
          Write-Host "🔢 Chrome Major Version: $majorVersion"

          # $latestReleaseUrl = "https://chromedriver.storage.googleapis.com/LATEST_RELEASE"
          # $version = Invoke-RestMethod -Uri $latestReleaseUrl
          $driverUrl = "https://storage.googleapis.com/chrome-for-testing-public/$chromeVersion/win64/chromedriver-win64.zip"

          Write-Host "⬇️ Downloading ChromeDriver $version from $driverUrl"
          Invoke-WebRequest -Uri $driverUrl -OutFile driver.zip
          Expand-Archive -Path driver.zip -DestinationPath chrome_driver -Force

          $driverExe = Get-ChildItem -Recurse -Path chrome_driver -Filter chromedriver.exe | Select-Object -First 1
          if ($driverExe) {
              $destinationPath = Join-Path (Split-Path $chromePath) "chromedriver.exe"
              Copy-Item $driverExe.FullName -Destination $destinationPath -Force
              Write-Host "✅ ChromeDriver installed at $destinationPath"
          } else {
              Write-Error "❌ Failed to locate extracted ChromeDriver!"
              exit 1
          }

      - name: Download JAR from GitHub Release
        run: |
          mkdir -p Project_Jars
          ASSET_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0 | jq -r '.assets[] | select(.name == "ZAFCore_GridAuth5.10.jar") | .url')
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $ASSET_URL -o Project_Jars/ZAFCore_GridAuth5.10.jar
        shell: bash

      - name: Create Report Folder if Not Present
        shell: pwsh
        run: |
            $reportPath = "Soccer/Reports/Default/Regression"
            if (-Not (Test-Path -Path $reportPath)) {
            New-Item -ItemType Directory -Path $reportPath -Force | Out-Null
            Write-Host "✅ Created missing report directory: $reportPath"
            } else {
             Write-Host "📂 Report directory already exists: $reportPath"
             }

      - name: Ensure Report Directory Exists
        if: always()
        shell: pwsh
        run: |
          $reportPath = "Soccer/Reports/Default/Regression"
           if (-Not (Test-Path -Path $reportPath)) {
              New-Item -ItemType Directory -Path $reportPath -Force
          }

      - name: Compile and Run TestNGJarExecution with Suite
        shell: pwsh
        run: |
          mkdir out
          $allJava = Get-ChildItem -Recurse -Filter *.java -Path src | ForEach-Object { $_.FullName }
          Write-Host " Compiling..."
          javac -cp "lib/*;Project_Jars/*" -d out $allJava -Xlint:deprecation -Xlint:unchecked
          Write-Host " Running automation..."
          java -cp "lib/*;Project_Jars/*;out" com.zensar.automation.executors.TestNGJarExecution Desktop Soccer vuvu
          Write-Host " Done running tests"

      - name: Upload HTML Report and Screenshot Folder
        if: always()
        shell: pwsh
        run: |
            # Find latest HTML report
             $report = Get-ChildItem -Path "Soccer/Reports/Default/Regression" -Filter *.html -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1

             if ($report) {
             $screenshotFolder = Join-Path $report.DirectoryName $report.BaseName

             Write-Host "📄 Found HTML Report: $($report.FullName)"
            Write-Host "🖼️ Assuming Screenshot Folder: $screenshotFolder"

             # Upload both HTML and screenshot folder if it exists
            if (Test-Path $screenshotFolder) {
             echo "📦 Uploading HTML report + screenshots..."
             echo "report-path=$($report.FullName)" >> $env:GITHUB_ENV
             echo "screenshots-path=$screenshotFolder" >> $env:GITHUB_ENV
            } else {
            echo "⚠️ Screenshot folder not found. Uploading HTML only..."
            echo "report-path=$($report.FullName)" >> $env:GITHUB_ENV
            echo "screenshots-path=" >> $env:GITHUB_ENV
            }
            } else {
              Write-Error "❌ No HTML report found to upload."
            exit 1
            }

      - name: Upload Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: automation-html-report
         path: |
          ${{ env.report-path }}
          ${{ env.screenshots-path }}

      - name: List Report Directory (Debug)
        shell: pwsh
        run: |
          Get-ChildItem -Path "Soccer/Reports/Default/Regression" -Recurse

    #  - name: Install dotnet-script
    #    run: dotnet tool install -g dotnet-script

    #  - name: Add dotnet tools to PATH
    #    run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

   #   - name: Send Email with Report & Screenshots via MailKit
    #    shell: pwsh
     #   run: dotnet script .github/workflows/SendReport.csx
      #  env:
       #   SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        #  SMTP_PORT: ${{ secrets.SMTP_PORT }}          # Usually 465 for SSL, or 587 for TLS
        #  SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}  # e.g., your-email@gmail.com
        #  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}  # App-specific password

